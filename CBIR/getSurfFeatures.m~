<<<<<<< HEAD
%% load all IRMA training and testing images:
trainPath = '../../IRMA/2009/Training Data/ImageCLEFmed2009_train.02/';
path = sprintf('%s*.png', trainPath);
=======
%load all IRMA training images:
dirpath = '../../IRMA/2009/Training Data/ImageCLEFmed2009_train.02/';
path = sprintf('%s/*.png', dirpath);
>>>>>>> d66b743ad6f38570985e0d235fb62b50cd2338ac
files = dir(path);

testPath = '../../IRMA/2009/Testing Data/';
path = sprintf('%s*.png', testPath);
testFiles = dir(path);

%append all test files to the list of training files, keeping track of the 
%end of the training files to distinguish them later:
trainingLength = length(files);
files = vertcat(files, testFiles);

i=1;
for file = files'
   %add path for either training or testing folder, depending on file:
   if (i <= trainingLength)
       imgpath = sprintf('%s/%s', trainPath, file.name);
   else
       imgpath = sprintf('%s/%s', testPath, file.name);
   end
   irma{i} = imread(imgpath);
   
   %any 3-channel images seem to be the same for all colour channels, so we
   %can just remove all but channel 1:
   if (length(irma{i}(1,1,:)) == 3)
       irma{i}(:,:,2:3) = [];
   end
   %TODO: filter the 3-channel greyscale images to 1-channel, and make sure
    %nothing is actually colour, or we'll need to handle that differently
   
   i = i+1;
end

%% calculate SURF features for them (using a low enough threshold to guarantee a min number of features to use)
features = cell(1, length(files));
strongestfeatures = cell(1, length(files));
fprintf('Progress:\n');
fprintf(['\n' repmat('.',1,(floor(length(files)/100))) '\n\n']);

<<<<<<< HEAD
parfor i=1:length(files)
   features{i} = detectSURFFeatures(irma{i}, 'MetricThreshold', 200);
   strongestfeatures{i}=features{i}.selectStrongest(10);

   %fprintf('Calculating features for %d \n', i);
   if mod(i,100) == 0
   fprintf('\b|\n');
   end
=======
%%

%calculate SURF features for them (using a low enough threshold to
%guarantee a min number of features to use)
i=1;
for file = files'
   SURFfeatures{i} = detectSURFFeatures(irma{i}, 'MetricThreshold', 200);
   strongestSURFfeatures{i}=SURFfeatures{i}.selectStrongest(10);
   i = i+1;
   fprintf('Calculating SURF features for %d \r', i);
>>>>>>> d66b743ad6f38570985e0d235fb62b50cd2338ac
end

%%

<<<<<<< HEAD
saveSURFtoFile('trainingFeatures.txt', strongestfeatures(1:trainingLength), 10);
saveSURFtoFile('testingFeatures.txt', strongestfeatures(trainingLength+1:end), 10);
=======
saveSURFtoFile('SURFfeatures.txt', strongestSURFfeatures);
>>>>>>> d66b743ad6f38570985e0d235fb62b50cd2338ac
%%


%calculate radon barcodes (RBCs) for each image 
i=1;
for file = files'
    barcode{i} = extractRBC(irma{i}, 32, 32, 8, false);
    i=i+1;
    fprintf('Extracting barcodes for image %d \r', i); 
end

%%

%calculate brisk features for images
i=1;
for file = files'
    BRISKfeatures{i} = detectBRISKFeatures(irma{i}, 'MinContrast', 0.1);
    strongestBRISKfeatures{i} = BRISKfeatures{i}.selectStrongest(10); 
    i=i+1;
    fprintf('Calculating BRISK features for %d \r', i);
end
    
    

